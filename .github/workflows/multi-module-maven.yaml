---

name: Multi-module maven release

on:
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version type to release'
        type: choice
        options:
          - 'major'
          - 'minor'
          - 'patch'
        required: true
        default: 'patch'

permissions:
  contents: write

jobs:
  get-child-modules:
    outputs:
      modules: ${{ steps.get-child-modules.outputs.modules }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Get child modules"
        id: get-child-modules
        run: |
          echo "modules=$(yq eval -j '.child_modules | map(.name)' ./.github/.child-modules.yaml | jq -c)" >> $GITHUB_OUTPUT
        shell: bash
  build:
    needs: get-child-modules
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.get-child-modules.outputs.modules) }}
    runs-on: ubuntu-latest
    steps:
      - name: "Configure java"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: '21'
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          path: ${{ matrix.module }}
          repository: ${{ github.repository_owner }}/${{ matrix.module }}
          token: ${{ secrets.MVN_MULTI_MODULE_TOKEN }}
      - name: "Build"
        run: |
          cd ${GITHUB_WORKSPACE}/${{ matrix.module }}
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          echo "Bumping ${{ matrix.module }} version"
          if [ "${{ github.event.inputs.version-type }}" == "major" ]; then
            mvn build-helper:parse-version versions:set -DgenerateBackupPoms=false \
            -DnewVersion=\${parsedVersion.nextMajorVersion}.0.0
          elif [ "${{ github.event.inputs.version-type }}" == "minor" ]; then
            mvn build-helper:parse-version versions:set -DgenerateBackupPoms=false \
            -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0
          else
            mvn build-helper:parse-version versions:set -DgenerateBackupPoms=false \
            -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}
          fi
          export VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Building ${{ matrix.module }} version ${VERSION}"
          mvn install
          mvn clean
          git add .
          git commit -m "Bump version to ${VERSION} [skip ci]"
          git push
          git tag -a v${VERSION} -m "Release version v${VERSION} [skip ci]"
          git push origin v${VERSION}
        env:
          GITHUB_TOKEN: ${{ secrets.MVN_MULTI_MODULE_TOKEN }}
        shell: bash
      - name: "Trigger module release"
        uses: netcracker/qubership-workflow-hub/actions/custom-event@main
        with:
          github-token: ${{ secrets.REMOTE_TRIGGER_TOKEN }}
          repo: ${{ matrix.module }}
          owner: ${{ github.repository_owner }}
          event-type: remote_release_trigger
          client-payload: |
            {
              "version": "${{ env.VERSION }}"
            }
      - name: "Deploy"
        run: |
          cd ${GITHUB_WORKSPACE}/${{ matrix.module }}
          echo "Deploying ${{ matrix.module }}"
          # mvn --batch-mode deploy -DskipTests
          mvn --batch-mode install -DskipTests
        shell: bash
      - name: "Bump version to next snapshot"
        run: |
          cd ${GITHUB_WORKSPACE}/${{ matrix.module }}
          mvn build-helper:parse-version versions:set -DgenerateBackupPoms=false \
          -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT
          export VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          mvn clean
          git add .
          git commit -m "Bump version to next snapshot ${VERSION} [skip ci]"
          git push
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.MVN_MULTI_MODULE_TOKEN }}
