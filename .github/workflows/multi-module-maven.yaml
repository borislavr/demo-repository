---

name: Multi-module maven release

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  get-child-modules:
    outputs:
      modules: ${{ steps.get-child-modules.outputs.modules }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Get child modules"
        id: get-child-modules
        run: |
          echo "modules=$(yq eval -j '.child_modules | map(.name)' ./.github/.child-modules.yaml | jq -c)" >> $GITHUB_OUTPUT
        shell: bash
  build:
    needs: get-child-modules
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.get-child-modules.outputs.modules) }}
    runs-on: ubuntu-latest
    steps:
      - name: "Configure java"
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: '21'
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          path: ${{ matrix.module }}
          repository: ${{ github.repository_owner }}/${{ matrix.module }}
      - name: "Build"
        run: |
          cd ${GITHUB_WORKSPACE}/${{ matrix.module }}
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository_owner }}/${{ matrix.module }}
          echo "Bumping ${{ matrix.module }} version"
          mvn build-helper:parse-version versions:set \
          -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}
          echo "Building ${{ matrix.module }}"
          mvn install
          mvn clean
          git add .
          git commit -m "Bump version"
          git push
          export VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          git tag -a v${VERSION} -m "Release version v${VERSION}"
          git push origin v${VERSION}
      - name: "Trigger module release"
        uses: netcracker/qubership-workflow-hub/actions/custom-event@main
        with:
          github-token: ${{ secrets.REMOTE_TRIGGER_TOKEN }}
          repo: ${{ matrix.module }}
          owner: ${{ github.repository_owner }}
          event-type: remote_release_trigger
          client-payload: |
            {
              "version": "${{ env.VERSION }}"
            }
      - name: "Deploy"
        run: |
          cd ${GITHUB_WORKSPACE}/${{ matrix.module }}
          echo "Deploying ${{ matrix.module }}"
          # mvn --batch-mode deploy -DskipTests
          mvn --batch-mode install -DskipTests
        shell: bash
      - name: "Bump version to next snapshot"
        run: |
          cd ${GITHUB_WORKSPACE}/${{ matrix.module }}
          mvn build-helper:parse-version versions:set \
          -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT
          mvn clean
          git add .
          git commit -m "Bump version to next snapshot"
          git push
        shell: bash

  release:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.get-child-modules.outputs.modules) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Get module version"
        id: get-module-version
        run: |
          import os
          import sys
          import yaml

          with open('./.github/.child-modules.yaml', 'r') as f:
              data = yaml.safe_load(f)
              for module in data['child_modules']:
                  if module['name'] == '${{ matrix.module }}':
                      print(f"module-version={module['version']}")
                      print(f"module-version={module['version']}", file=open(os.getenv('GITHUB_OUTPUT'), 'a'))
                      sys.exit(0)
          sys.exit(1)
        shell: python

      - name: "Trigger module release"
        uses: netcracker/qubership-workflow-hub/actions/custom-event@main
        with:
          github-token: ${{ secrets.REMOTE_TRIGGER_TOKEN }}
          repo: ${{ matrix.module }}
          owner: ${{ github.repository_owner }}
          event-type: remote_release_trigger
          client-payload: |
            {
              "version": "${{ steps.get-module-version.outputs.module-version }}"
            }
  # update-modules-versions:
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: "Update module version"
  #       id: update-module-version
  #       run: |
  #         import os
  #         import yaml

  #         with open('./.github/.child-modules.yaml', 'r') as f:
  #             data = yaml.safe_load(f)
  #         for module in data['child_modules']:
  #             search_str = module['module_string'].replace('${version}', '.*$')
  #             ver_str = module['module_string'].replace('${version}', module['version'])
  #             print(f"{search_str} -> {ver_str}")
  #             os.system(f"sed -i 's|{search_str}|{ver_str}|' {data['config_file']}")
  #       shell: python
  #     - name: "Commit changes"
  #       run: |
  #         git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
  #         git config --global user.name "${GITHUB_ACTOR}"
  #         git add .
  #         git commit -m "Update modules versions"
  #         git push
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       shell: bash
