---

name: Multi-module release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        type: string
        required: true
        default: '1.0.0'

permissions:
  contents: read

jobs:
  get-child-modules:
    outputs:
      modules: ${{ steps.get-child-modules.outputs.modules }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: "Get child modules"
        id: get-child-modules
        run: |
          echo "modules=$(yq eval -j '.child_modules | map(.name)' ./.github/.child-modules.yaml | jq -c)" >> $GITHUB_OUTPUT
        shell: bash
  release:
    needs: get-child-modules
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.get-child-modules.outputs.modules) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: "Get module version"
        id: get-module-version
        run: |
          import os
          import sys
          import yaml

          with open('./.github/.child-modules.yaml', 'r') as f:
              data = yaml.safe_load(f)
              for module in data['child_modules']:
                  if module['name'] == '${{ matrix.module }}':
                      print(f"module-version={module['version']}")
                      print(f"module-version={module['version']}", file=open(os.getenv('GITHUB_OUTPUT'), 'a'))
                      sys.exit(0)
          sys.exit(1)
        shell: python

      # - name: "Get module version"
      #   id: get-module-version
      #   run: |
      #     module_version=$(yq eval -o=json '.child_modules | map(select(.name == "${{ matrix.module }}") | .version)' ./.github/.child-modules.yaml | jq -r '.[0]')
      #     echo "module-version=$module_version"
      #     echo "module-version=$module_version" >> $GITHUB_OUTPUT
      #     # echo "module-version=$(jq '.child_modules[] | select(.name == "${{ matrix.module }}") | .version' ./.github/.child-modules.json)"
      #     # echo "module-version=$(jq '.child_modules[] | select(.name == "${{ matrix.module }}") | .version' ./.github/.child-modules.json)" >> $GITHUB_OUTPUT
      #   shell: bash
      - name: "Trigger module release"
        uses: netcracker/qubership-workflow-hub/actions/custom-event@main
        with:
          github-token: ${{ secrets.REMOTE_TRIGGER_TOKEN }}
          repo: ${{ matrix.module }}
          owner: ${{ github.repository_owner }}
          event-type: remote_release_trigger
          client-payload: |
            {
              "version": "${{ steps.get-module-version.outputs.module-version }}"
            }
  update-modules-versions:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: "Prepare python"
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -U pip setuptools wheel
      #     pip install ruamel.yaml

      - name: "Update module version"
        id: update-module-version
        run: |
          import os
          import yaml

          with open('./.github/.child-modules.yaml', 'r') as f:
              data = yaml.safe_load(f)
          for module in data['child_modules']:
              search_str = module['module_string'].replace('${version}', '.*$')
              ver_str = module['module_string'].replace('${version}', module['version'])
              print(f"{search_str} -> {ver_str}")
              os.system(f"sed -i 's|{search_str}|{ver_str}|' {data['config_file']}")
        shell: python
      - name: "Commit changes"
        run: |
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git config --global user.name "${GITHUB_ACTOR}"
          git add .
          git commit -m "Update modules versions"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

  # update-modules-versions:
  #   needs: [get-child-modules]
  #   permissions:
  #     contents: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: "Update modules versions"
  #       run: |
  #         export config_file=$(yq eval '.config_file' ./.github/.child-modules.yaml)
  #         for module in ${{ fromJson(needs.get-child-modules.outputs.modules) }}; do
  #           export version=$(yq eval '.child_modules | map(select(.name == "${module}") | .version) | .[0]' ./.github/.child-modules.yaml)
  #           export version_path=$(yq eval '.child_modules | map(select(.name == "${module}") | .version_path) | .[0]' ./.github/.child-modules.yaml)
  #           export module_string=$(yq eval '.child_modules | map(select(.name == "${module}") | .module_string) | .[0]' ./.github/.child-modules.yaml)
  #           yq eval -i ".${version_path} |= \"${module_string}\"" ./${config_file}
  #         done
  #       shell: bash

        # - name: "Update module version"
        # id: update-module-version
        # run: |
        #   export config_file=$(yq eval '.config_file' ./.github/.child-modules.yaml)
        #   export version=$(yq eval '.child_modules | map(select(.name == "${{ matrix.module }}") | .version) | .[0]' ./.github/.child-modules.yaml)
        #   export version_path=$(yq eval '.child_modules | map(select(.name == "${{ matrix.module }}") | .version_path) | .[0]' ./.github/.child-modules.yaml)
        #   export module_string=$(yq eval '.child_modules | map(select(.name == "${{ matrix.module }}") | .module_string) | .[0]' ./.github/.child-modules.yaml)
        #   yq eval -i ".${version_path} |= \"${module_string}\"" ./${config_file}
        # shell: bash
